function [nfigs,fighandles]=figs_to_ps(filename,newFileFlag, paper_orientation,volubleFlag)% [nfigs,fighandles]=figs_to_ps(filename,paper_orientation,volubleFlag)%   prints all figures to output.ps%   %   nfigs: number of figures printed%   newfileflag: flag to make new .ps file or append existing file%   fighandles: handles of open figures%   volubleFlag: tells you if it saved it or not%if nargin < 4    volubleFlag = 'on';endif nargin < 3    paper_orientation = 'landscape';endif nargin < 2    newFileFlag = 1;endif nargin < 1    filename = fullfile('.', 'NewFigs', 'output.ps');endnfigs=0;hall=sortfighandlearray(get(0,'Children'));fighandles=[];if (isempty(hall)) return; endfor ih=1:size(hall,1)    if (strmatch(get(hall(ih),'Type'),'figure'))        fighandles=[fighandles;hall(ih)];        figure(hall(ih));        eval(sprintf('orient %s',paper_orientation))        %   print -dwinc -append -loose output.ps;        % 	eval(sprintf(' print -dpsc2 -append -loose %s',filename));        if newFileFlag && length(fighandles) == 1            eval(sprintf(' print -dpsc2 -painters %s', filename));        else            eval(sprintf(' print -dpsc2 -painters -append %s', filename));        end        switch(volubleFlag)            case 'on'                fprintf('%s: Saved figure %3d to file %s \n',mfilename, ih, filename)            otherwise                        end    endendnfigs=size(fighandles,1);%sander_clps(filename);% Convert PS file to PDF, then delete original PS filesystem(sprintf('ps2pdf %s %s', filename, [filename(1:end-3), '.pdf']));system(sprintf('rm %s', filename));